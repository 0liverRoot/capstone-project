Project Proposal: Urban Gardening Planner

Tech Stack
  Frontend (Web & Mobile):
    React: For building a responsive and interactive web application.
    React Native (Stretch Goal): For creating a mobile version that works across Android and iOS.
  Backend:
    Node.js with Express: For managing server-side logic, RESTful APIs, and database operations.
  Database:
    MongoDB: A NoSQL database for storing user data, garden plans, crop details, and user logs.
  Content Management (optional for gardening tips):
    Strapi or Contentful: To manage and deliver educational gardening content if required.
  Hosting:
    Render or Railway or Heroku: For backend deployment.
    Netlify or Vercel: For hosting the frontend.

Focus of the Project
  This will be a full-stack application, with equal emphasis on frontend user experience and backend data management. 
  The goal is to provide personalized garden planning tools through a smooth, responsive interface.

Project Type
  Responsive Website: Main platform.
  Mobile App (Stretch Goal): Using React Native for iOS and Android compatibility.

Project Goal
  The project aims to help users plan and manage their home gardens efficiently, taking into account local climate, 
  available space, and preferred crops.
  Users will be able to:
    Build a personalized garden plan
    View a seasonal planting calendar
    Estimate harvest yields
    Track garden progress

User Demographic
  Home Gardeners: Individuals in urban or suburban areas seeking to grow their own food.
  Sustainability Enthusiasts: Users interested in food independence and eco-friendly living.
  Beginners: People new to gardening who need guided support and planning tools.

Data and API
  Data: Includes static crop data (e.g., space requirements, days to maturity, yield), user inputs (location, garden size), and weather/climate data.
  Data Collection:
    Static crop data manually seeded or imported from CSV.
    Real-time climate data from an external API (OpenWeather or similar).
    User plans and activity logs saved to MongoDB.
  API:
    Backend API will serve and manage user plans.
    Optional integration with Contentful or Strapi for gardening guides.

Project Approach
  1. Database Schema
       Users: ID, email, password, location.
       Crops: Name, spacing, yield, season, maturity time.
       Plans: User ID, selected crops, garden size, planting/harvest dates.
  3. Potential API Issues
      Data consistency: Ensuring accurate calculations and data syncing across user sessions.
      Scalability: Managing garden plans and crop data efficiently as user base grows.
      Weather API Errors: Handling missing or delayed responses.
  4. Sensitive Information
      User emails and hashed passwords will be securely stored.
  5. Functionality
      User Auth: Sign up/login with JWT-based auth.
      Garden Setup: Input garden size, select crops.
      Yield Estimator: See how much food could be grown based on inputs.
      Calendar View: Auto-generate planting and harvest dates.
      Progress Tracker: (Stretch goal) Track which crops are planted, harvested, or failed.
  6. User Flow
      Landing Page: Intro and call-to-action to start a garden plan.
      Sign Up/Login: Secure access to personal dashboard.
      Garden Setup: Select garden dimensions and location.
      Crop Selection: Choose crops with suggested amounts.
      Yield Dashboard: View charts and total estimates.
      Planting Calendar: Visual timeline for activities.
  7. Stretch Goals
      PDF Export: Generate downloadable planting plans.
      Weather Insights: Recommendations based on upcoming weather.
      Community Forum: Users can share tips and updates.
      Multi-language Support: For broader accessibility.
